// src/services/athletes.ts
import type { Athlete } from '@/types'

const base = '' // –ø—Ä–∏ –ø—Ä–æ–∫—Å–∏ –≤ vite.config.ts –æ—Å—Ç–∞–≤—å –ø—É—Å—Ç—ã–º

export async function getAthletes(params: { search?: string; group?: string; status?: string } = {}) {
  const qs = new URLSearchParams(params as any).toString()
  const res = await fetch(`${base}/api/athletes${qs ? `?${qs}` : ''}`)
  if (!res.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤')
  const json = await res.json()
  // üí° –ë—ç–∫ –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –º–∞—Å—Å–∏–≤ –∏–ª–∏ –æ–±—ä–µ–∫—Ç —Å items ‚Äî –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º:
  const items: Athlete[] = Array.isArray(json) ? json : (json?.items ?? [])
  return { items }
}

export async function createAthlete(body: Partial<Athlete>) {
  const res = await fetch(`${base}/api/athletes`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(body),
  })
  if (!res.ok) throw new Error('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å')
  return res.json()
}

export async function updateAthlete(id: string, body: Partial<Athlete>) {
  const res = await fetch(`${base}/api/athletes/${id}`, {
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(body),
  })
  if (!res.ok) throw new Error('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å')
  return res.json()
}
